// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package http_json

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	debug "github.com/sergei-svistunov/gorpc/debug"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson7f5ba663DecodeGithubComSergeiSvistunovGorpcTransportHttpJson(in *jlexer.Lexer, out *httpSessionResponse) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			out.Result = string(in.String())
		case "data":
			out.Data = in.Interface()
		case "error":
			out.Error = string(in.String())
		case "debug":
			if in.IsNull() {
				in.Skip()
				out.Debug = nil
			} else {
				if out.Debug == nil {
					out.Debug = new(debug.Debug)
				}
				easyjson7f5ba663DecodeGithubComSergeiSvistunovGorpcDebug(in, &*out.Debug)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson7f5ba663EncodeGithubComSergeiSvistunovGorpcTransportHttpJson(out *jwriter.Writer, in httpSessionResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"result\":")
	out.String(string(in.Result))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	if d, ok := in.Data.(json.Marshaler); ok {
		out.Raw(d.MarshalJSON())
	} else {
		out.Raw(json.Marshal(in.Data))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"error\":")
	out.String(string(in.Error))
	if in.Debug != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"debug\":")
		if in.Debug == nil {
			out.RawString("null")
		} else {
			easyjson7f5ba663EncodeGithubComSergeiSvistunovGorpcDebug(out, *in.Debug)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v httpSessionResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7f5ba663EncodeGithubComSergeiSvistunovGorpcTransportHttpJson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v httpSessionResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7f5ba663EncodeGithubComSergeiSvistunovGorpcTransportHttpJson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *httpSessionResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7f5ba663DecodeGithubComSergeiSvistunovGorpcTransportHttpJson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *httpSessionResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7f5ba663DecodeGithubComSergeiSvistunovGorpcTransportHttpJson(l, v)
}
func easyjson7f5ba663DecodeGithubComSergeiSvistunovGorpcDebug(in *jlexer.Lexer, out *debug.Debug) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "modules":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Modules = make(map[string]interface{})
				} else {
					out.Modules = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					v1 = in.Interface()
					(out.Modules)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson7f5ba663EncodeGithubComSergeiSvistunovGorpcDebug(out *jwriter.Writer, in debug.Debug) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"modules\":")
	if in.Modules == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in.Modules {
			if !v2First {
				out.RawByte(',')
			}
			v2First = false
			out.String(string(v2Name))
			out.RawByte(':')
			out.Raw(json.Marshal(v2Value))
		}
		out.RawByte('}')
	}
	out.RawByte('}')
}
